* The Joy of Rust (for Alchemists) 
** What is Rust
** How to write Rust
** Why should you care
* About me
Ben Reynolds
Work at Zaarly
github.com/benreyn
twitter.com/benjamreynolds

* Some shoutouts
  
- Brian Stevens
- Steve Klabnik
- The entire Rust team
- elixirschool

* What is Rust?
  
Rust is a systems programming language that
runs blazingly fast, prevents segfaults, and guarantees thread safety.

A language empowering everyone 
to build reliable and efficient software.

From the foreward to "The Book"

It wasn’t always so clear, but the Rust programming language
is fundamentally about empowerment: no matter what kind of code 
you are writing now, Rust empowers you to reach farther, 
to program with confidence in a wider variety of domains 
than you did before.

* A *very* brief intro to Rust
** Hello World

#+BEGIN_SRC rustic
fn main() {
    println!("Hello, World!");
}  
#+END_SRC

** Hello KC Elixir

#+BEGIN_SRC rustic
  fn main() {
      let name = "KC Elixir";
      println!("Hello, {}!", name);
  }
#+END_SRC

** Cargo
- Cargo is the primary CLI you will use when working with Rust
- Cargo is both a build tool, and a package manager
- Cargo is like Rust's version of mix
- Commands
cargo new 
cargo new --lib
cargo init
cargo build
cargo run
** Variables
- Types must be declared for constants
- Variables are immutable by default

#+BEGIN_SRC rustic
const FAVENUM: u32 = 12;

fn main() {
    let my_name = "Ben";
    let mut my_age = 29;
}
#+END_SRC

** Types
Types are a huge part of rust, and deep topic
worth its own talk, but here is a brief intro

- bool: Boolean
- u32: unsigned 32-bit integer
- i32: signed 32-bit integer
- char: unicode character
- String and/or &str: Strings, strings, strings

** Strings 
- Strings in rust are a bit more complicated than you might
initially expect them to be. 
- This is a topic so complex that there is an entire chapter 
in the rust book on it.
- Could write a whole talk on String types alone
 
#+BEGIN_SRC rustic
fn main() {
    let name = "a string literal"; // <- This is really a &str
    let other_name = String::from("another string literal"); // <- This is REALLY a String
}
#+END_SRC

** Control Flow

*** If, else if, and else
#+BEGIN_SRC rustic
fn main() {
    let x = 3;

    if x < 5 {
        println!("x is less than 5");
    } else if x > 5 {
        println!("x is greater than 5");
    } else {
        println!("x must be equal to 5");
    }
}
#+END_SRC

*** Match
#+BEGIN_SRC rustic
fn main() {
    let number = 3;

    match number {
        1 => println!("One!"),
        2 | 3 | 5 | 7 | 11 => println!("This is a prime"),
        13...19 => println!("A teen"),
        _ => println!("Nothing special"),
    }
}
#+END_SRC

*** Iteration

#+BEGIN_SRC rustic
  fn main() {
      let arr = [10, 20, 30, 40, 50];

      for element in arr.iter() {
	  println!("the value is: {}", element);
      }
  }
  
fn 
#+END_SRC

** Functions
#+BEGIN_SRC rustic
  fn fib(n: u32) -> u32 {
      if n < 2 {
	  n
      } else {
	  fib(n - 1) + fib(n - 2)
      }
  }
  
  fn say_hello(name: &str) {
      println!("Hello, ", name);
  }

  fn main() {
      let x = 10;
      let result = fib(x);
      println!("{}", result);
  }
#+END_SRC

** Result Types
#+BEGIN_SRC rustic
  use std::num::ParseIntError;
  use std::result::Result;

  fn main() -> Result<(), ParseIntError> {
      let x = "10";
      let y = "not a number";
      println!("{:?}", x.parse::<i32>()); // Ok(10)
      println!("{:?}", y.parse::<i32>()); // Err(ParseIntError { kind: InvalidDigit })
      let i = match x.parse::<i32>() {
	  Ok(number) => number,
	  Err(e) => return Err(e),
      };
      println!("{}", i);
      Ok(())
  }
#+END_SRC
   
* Why should I (an Alchemist) care
** Low level speed with high level abstractions
#+BEGIN_SRC rustic
fn main() {

    for i in 1..11 {
	print!("{} ", i);
    }
    // output: 1 2 3 4 5 6 7 8 9 10

    for i in (0..21).filter(|x| (x % 2 == 0)) {
	print!("{} ", i);
    }
    // output: 0 2 4 6 8 10 12 14 16 18 20
    
    for i in (0..11).rev() {
	print!("{} ", i);
    }
    // output: 10 9 8 7 6 5 4 3 2 1 0
    
    for i in (1..11).map(|x| x * x) {
	print!("{} ", i);
    }
    // output: 1 4 9 16 25 36 49 64 81 100
    
    let result = (1..6).fold(0, |acc, x| acc + x * x);
    println!("result = {}", result);
    // output: result = 55
    
    for i in (0..11).rev().filter(|x| (x % 2 == 0)) {
	print!("{} ", i);
    }
    // output: 10 8 6 4 2 0
#+END_SRC

#+BEGIN_SRC rustic
fn main() {
    let cities = vec!["Toronto", "New York", "Melbourne"];
    let populations = [2_615_060, 8_550_405, ‎4_529_500];

    let matrix = cities.iter().zip(populations.iter());

    for (c, p) in matrix {
	println!("{:10}: population = {}", c, p);
    }
}
#+END_SRC

** Calling Rust code from Elixir: [[https://github.com/rusterlium/rustler][Rustler]]
   
#+BEGIN_SRC elixir
  def project do
    [app: :my_app,
     version: "0.1.0",
     elixir: "~> 1.4",
     build_embedded: Mix.env == :prod,
     start_permanent: Mix.env == :prod,
     compilers: [:rustler] ++ Mix.compilers,
     rustler_crates: rustler_crates(),
     deps: deps()]
  end

  defp deps do
    [{:rustler, "~> 0.8.0"}]
  end
  
#+END_SRC


#+BEGIN_SRC rustic

#[rustler::nif]
fn add(a: i64, b: i64) -> i64 {
    a + b
}

rustler::init!("Elixir.Math", [add]);

#+END_SRC
   
* How can I learn more?
Rust documentation, https://rust-lang.org/learn
Rust on exercism.io, http://exercism.io/tracks/rust
New Rustacean Podcast, http://www.newrustacean.com
Taking Elixir to the Metal with Rust, https://www.youtube.com/watch?v=lSLTwWqTbKQ
